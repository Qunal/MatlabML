function tableout = imp_conc_in(workbookFile,sheetName,startRow,endRow)
%IMPORTFILE Import data from a spreadsheet
%   IMPORTFILE(FILE) reads data from the first worksheet in the Microsoft
%   Excel spreadsheet file named FILE and returns the data as a table.
%
%   IMPORTFILE(FILE,SHEET) reads from the specified worksheet.
%
%   IMPORTFILE(FILE,SHEET,STARTROW,ENDROW) reads from the specified
%   worksheet for the specified row interval(s). Specify STARTROW and
%   ENDROW as a pair of scalars or vectors of matching size for
%   dis-contiguous row intervals. To read to the end of the file specify an
%   ENDROW of inf.
%
%	Date formatted cells are converted to MATLAB serial date number format
%	(datenum).
%   Non-numeric cells are replaced with: NaN
%
% Example:
%   importfile('concentrator_data.xlsx','Process Data Values',8,9511);
%
%   See also XLSREAD.

% Auto-generated by MATLAB on 2013/12/10 16:07:17

%% Input handling

% If no sheet is specified, read first sheet
if nargin == 1 || isempty(sheetName)
    sheetName = 1;
end

% If row start and end points are not specified, define defaults
if nargin <= 3
    startRow = 8;
    endRow = 9512;
end

%% Import the data, extracting spreadsheet dates in MATLAB serial date number format (datenum)
[~, ~, raw1, dateNums1] = xlsread(workbookFile, sheetName, sprintf('A%d:B%d',startRow(1),endRow(1)),'' , @convertSpreadsheetDates);
[~, ~, raw2, dateNums2] = xlsread(workbookFile, sheetName, sprintf('F%d:BX%d',startRow(1),endRow(1)),'' , @convertSpreadsheetDates);
raw = [raw1,raw2];
dateNums = [dateNums1,dateNums2];
for block=2:length(startRow)
    [~, ~, tmpRawBlock1, tmpDateNumBlock1] = xlsread(workbookFile, sheetName, sprintf('A%d:B%d',startRow(block),endRow(block)),'' , @convertSpreadsheetDates);
    [~, ~, tmpRawBlock2, tmpDateNumBlock2] = xlsread(workbookFile, sheetName, sprintf('F%d:BX%d',startRow(block),endRow(block)),'' , @convertSpreadsheetDates);
    raw = [raw;tmpRawBlock1,tmpRawBlock2]; %#ok<AGROW>
    dateNums = [dateNums;tmpDateNumBlock1,tmpDateNumBlock2]; %#ok<AGROW>
end
raw(cellfun(@(x) ~isempty(x) && isnumeric(x) && isnan(x),raw)) = {''};

%% Replace date strings by MATLAB serial date numbers (datenum)
R = ~cellfun(@isequalwithequalnans,dateNums,raw) & cellfun('isclass',raw,'char'); % Find spreadsheet dates
raw(R) = dateNums(R);

%% Replace non-numeric cells with NaN
R = cellfun(@(x) ~isnumeric(x) && ~islogical(x),raw); % Find non-numeric cells
raw(R) = {NaN}; % Replace non-numeric cells

%% Create output variable
data = reshape([raw{:}],size(raw));

%% Create table
tableout = table;

%% Allocate imported array to column variable names
tableout.Time = data(:,1);
tableout.RawFeedRate = data(:,2);
tableout.RawFeedspeed = data(:,3);
tableout.PlantFeedMagneticsFeedRate = data(:,4);
tableout.PlantFeedBinLevel1 = data(:,5);
tableout.PlantFeedBinLevel2 = data(:,6);
tableout.FeedRateCoarseGrindA = data(:,7);
tableout.Pressure1A = data(:,8);
tableout.Pressure2A = data(:,9);
tableout.ForceA = data(:,10);
tableout.Gap1A = data(:,11);
tableout.Gap2A = data(:,12);
tableout.CoarseGrindScreenWaterA = data(:,13);
tableout.RMSScreenWaterA = data(:,14);
tableout.RMSUnitscurrentdrawA1 = data(:,15);
tableout.RMSUnitscurrentdrawA2 = data(:,16);
tableout.RMSUnitscurrentdrawA3 = data(:,17);
tableout.RMSUnitscurrentdrawA4 = data(:,18);
tableout.RMSUnitswaterA = data(:,19);
tableout.RMSdistributorpressureA = data(:,20);
tableout.PercentFreshFeedA = data(:,21);
tableout.RollerStatusA = data(:,22);
tableout.FeedRateCoarseGrindB = data(:,23);
tableout.Pressure1B = data(:,24);
tableout.Pressure2B = data(:,25);
tableout.ForceB = data(:,26);
tableout.Gap1B = data(:,27);
tableout.Gap2B = data(:,28);
tableout.CoarseGrindScreenWaterB = data(:,29);
tableout.RMSScreenWaterB = data(:,30);
tableout.RMSUnitscurrentdrawB1 = data(:,31);
tableout.RMSUnitscurrentdrawB2 = data(:,32);
tableout.RMSUnitscurrentdrawB3 = data(:,33);
tableout.RMSUnitscurrentdrawB4 = data(:,34);
tableout.RMSUnitswaterB = data(:,35);
tableout.RMSdistributorpressureB = data(:,36);
tableout.PercentFreshFeedB = data(:,37);
tableout.RollerStatusB = data(:,38);
tableout.RMSwaterA = data(:,39);
tableout.RMStailsdensityA = data(:,40);
tableout.RMS01FeedDensityA = data(:,41);
tableout.RMS1BallMillFeedDensityA = data(:,42);
tableout.RMS1BallMillFeedRateA = data(:,43);
tableout.RMS1BallMillMassFlowrateA = data(:,44);
tableout.RMSwaterB = data(:,45);
tableout.RMStailsdensityB = data(:,46);
tableout.RMS02FeedDensityB = data(:,47);
tableout.RMS2BallMillFeedDensityB = data(:,48);
tableout.RMS2BallMillFeedRateB = data(:,49);
tableout.RMS2BallMillMassFlowrateB = data(:,50);
tableout.SMSProcessWater = data(:,51);
tableout.fmsRawWater = data(:,52);
tableout.fms1ProcessWater = data(:,53);
tableout.fms2ProcessWater = data(:,54);
tableout.fmsFeedDensity = data(:,55);
tableout.fmsFeedPressure = data(:,56);
tableout.RMSCombinedMassFlowRate = data(:,57);
tableout.FineGrindWeight = data(:,58);
tableout.MillTotalPowerDrawTotal = data(:,59);
tableout.SMSwater = data(:,60);
tableout.FineGrindSump1 = data(:,61);
tableout.FineGrindSump2 = data(:,62);
tableout.FineGrindProcessWaterFeedChute = data(:,63);
tableout.FineGrindProcessWater = data(:,64);
tableout.CycloneWaterAddition = data(:,65);
tableout.CycloneFeeddensityA = data(:,66);
tableout.CyclonepressureA = data(:,67);
tableout.CycloneFeeddensityB = data(:,68);
tableout.CyclonepressureB = data(:,69);
tableout.Pump1 = data(:,70);
tableout.Pump2 = data(:,71);
tableout.TimeTrain1On = data(:,72);
tableout.TimeTrain2On = data(:,73);

